package pap.lorinc.algos.ctci._08

import spock.lang.*

import static pap.lorinc.algos.ctci._08._08_02_RobotInGrid.path
import static pap.lorinc.algos.helpers.Numbers.bitSize

@Unroll class _08_02_RobotInGridTest extends Specification {
    /*@formatter:off*/
    def 'robotInGrid?'() {
        when:   List<Point> path = path(grid)
        then:   path.first() == Point.of(0, 0)
                path.indices.each{ i -> assert i == 0 || path[i] in [path[i-1].right(), path[i-1].down()] }
                path.last() == Point.of(grid.size()-1, grid[0].size()-1)
        
        where:  grid << grids()
    }
    /*@formatter:on*/

    static grids() {
        def results = [
        [0b111,
         0b111,
         0b111],
        [0b111,
         0b001,
         0b001],
        [0b100,
         0b100,
         0b111],
        [0b100,
         0b110,
         0b011],
        [0b110,
         0b011,
         0b001],
        [0b11000,
         0b01100,
         0b00111],
        [0b1100000000000000,
         0b0100000000000000,
         0b0111110000000000,
         0b0000010000000000,
         0b0000011111100000,
         0b0000000000111111,
         0b0000000000000001],
        [0b111111111111111111101111111111111111111111111111111111111111111,
         0b111111111111100000000000000000000000000000000000000000000000000,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111101111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111,
         0b111111111111111111111111111111111111111111111111111111111111111],
        ]

        results.collect {
            def w = bitSize(it[0]) - 1
            it.collect { BigInteger row ->
                (w..0).collect { row.testBit(it) }
            }
        }
    }
}
